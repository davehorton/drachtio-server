#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.
#
# $Id: rules,v 1.7 2007/12/20 14:21:19 paka Exp $
#
# See debhelper(7) (uncomment to enable)
# output every command that modifies files on the build system.
#
# History:
# --------
#  2020-10.06 create first debian package 

# Uncomment this to turn on verbose mode.
export DH_VERBOSE = 1

# This is the debhelper compatibility version to use.
# export DH_COMPAT=4
#  -- already set in compat
#  force no striping (always include debug symbols for now)
export DEB_BUILD_OPTIONS:="$(DEB_BUILD_OPTIONS) debug"

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -g
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif



configure: configure-stamp
configure-stamp:
	dh_testdir
# Add here commands to configure the package.

	touch configure-stamp

build: build-stamp

build-stamp: configure-stamp 
	dh_testdir




# see FEATURE AREAS in dpkg-buildflags(1)
#export DEB_BUILD_MAINT_OPTIONS = hardening=+all

# see ENVIRONMENT in dpkg-buildflags(1)
# package maintainers to append CFLAGS
#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
# package maintainers to append LDFLAGS
#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed

# Add here commands to compile the package.
	./autogen.sh; \
	USE_SPANDSP=yes LONG_DEBUG_MESSAGE=yes CPPFLAGS="$(CPPFLAGS)"; \
	mkdir build; \
       	cd build; \
	../configure --prefix=/usr CPPFLAGS='-DNDEBUG';  \
	$(MAKE) 
	
	touch build-stamp




# %:
#        dh $@  --with autotools_dev


# dh_make generated override targets
# This is example for Cmake (See https://bugs.debian.org/641051 )
#override_dh_auto_configure:
#       dh_auto_configure -- #  -DCMAKE_LIBRARY_PATH=$(DEB_HOST_MULTIARCH)






clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp
	
# Add here commands to clean up after the build process.

	dh_clean
	

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install
	dh_installdirs
	
# Add here commands to install the package into debian/drachtio
	cd build; \
	$(MAKE) install \
	DESTDIR=$(CURDIR)/debian/drachtio-server 

	

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common: 
	dh_testdir
	dh_testroot
	dh_installdebconf
	dh_installinit  -r --no-start
	dh_lintian
	dh_installinfo
	dh_link
	dh_strip -a --dbg-package=drachtio-server-dbg
	dh_compress 
	dh_fixperms
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb


# Build architecture-independent packages using the common target
binary-indep: build install
# (Uncomment this next line if you have such packages.)
#        $(MAKE) -f debian/rules DH_OPTIONS=-i binary-common
# We have nothing to do by default.


# Build architecture-dependent packages using the common target
binary-arch: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	$(MAKE) -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure

